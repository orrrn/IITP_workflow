# Malware Outbreak in Incident Response Playbook from Incident Response Consortium
# Written in Sudocode

def main(step):
    prepare()
    detect()
    analyze()
    contain()
    eradicate()
    recover()
    post_incident_handling()

def prepare():
    if vulnerability_manager | threat_manager | risk_manager : # Determine Core Ops Team & Define Roles
        if executive_lead | professional_services_lead | response_support : # Determine Extended Team & Define Roles
            if define_escalation_path is internal_path:
                goto escalation_document
            else define_escalation_path is external_path:
                goto escalation_document
            endif
        endif
    endif
        

def detect():
    if define_threat_indicators is is_custom:
        goto custom_indicators
        threat_indicators is custom

    else define_threat_indicators is is_standard:
        goto unknown_or_unexpected_network_traffic_from_store_and_headquarter_locations
        goto unknown_or_unexpected_outgoing_internet_traffic
        goto unknown_or_unexpected_services_and_applications_configured_to_launch_automatically_on_system_boot
        goto degraded_processing_capability
        goto anti-virus_programs_malfaunctioning_or_becoming_disabled_for_unknown_reasons
        threat_indicators is standard

    endif

    if define_risk_factors is is_custom:
        goto custom_factors
        risk_factors is custom

    else define_risk_factors is is_standard:
        goto public_safety_IS_affected
        goto personnel_safety_IS_NOT_affected
        goto IP_is_at_risk_of_being_exposed
        goto customers_are_affected_by_this_incident
        goto products_goods_services_are_affected_by_this_outbreak
        goto PII_is_at_risk_of_being_exposed
        goto this_act_could_be_exploited_for_criminal_activity
        goto this_could_have_a_negative_affact_to_the_public_brand
        risk_factors is standard

    endif

    goto request_packet_capture
    goto conduct scans

    
def analyze():
    if define_risk_factors is is_custom:
        goto business
        goto compliance
        goto custom_factors
        goto operational
        goto industry
        risk_facotrs is custom

    else define_risk_factors is is_standard:
        goto IP_is_at_risk_of_being_exposed
        goto products/goods/services_are_affected_by_this_outbreak
        goto this_could_have_a_negative_affact_to_the_public_brand
        goto personnel_safety_IS_NOT_affected
        goto this_act_could_be_exploited_for_criminal_activity
        goto PII_is_at_risk_of_being_exposed
        goto customers_are_affected_by_this_incident
        goto public_safety_IS_affected
        risk_facotrs is standard
    endif

def contain():
    goto identify_the_systems_that_have_been_affected(servers, desktop, laptop, mobile, VM, LDAP_directory)
    goto identify_the_data_compromised(servers, desktop, laptop, mobile, VM, LDAP_directory)
    goto identify_the_IT_services_being_impacted(servers, desktop, laptop, mobile, VM, LDAP_directory)
    goto identify_the_means_through_which_the_malware_gained_access(servers, desktop, laptop, mobile, VM, LDAP_directory)
    goto identify_the_vulerability_being_exploited(select_database, incident_database, vulnerability_logs, threat_database, system_logs, query_databases, generate_report)
    goto identify_how_widespread_the_attack_has_spread(view_report,view_record_details, select_records, copy_record_details)
    goto identify_the_tools_used_to_detect_the_incident(SIEM, IDS, firewall, scanners, antivirus)

def eradicate():
    if prevent_spread is true:
       goto run_in_sandbox
       goto analyze_in_forensics
       goto request_system_patch
       goto block_with_anti_virus
       goto disable_services
       goto restrict_network_and_site
       goto adjust_firewall_rules
       goto apply_SIEM_rules
    endif

    if communications is true:
        goto direct_phone_call
        goto conference_call
        goto intranet_meeting
        goto internet_meeting
        goto in_person_meeting
        goto mobile_messaging
    endif

    if eradicate_malware is true:
        goto clean_with_antivirus
        goto quarantine_with_antivirus
        goto malware_removal_tool
        goto manual_intervention
    endif

def recover():
    if recover_systems is true:
        goto reimage
        goto IDS_and_IPS_and_firewall_updates
        goto rebuild
        goto remove_temporary_containment
    endif

    if recover_data is true:
        goto data_restore
        goto cloud_synchronization
    endif

    if incident_remediation is true:
        goto wipe_and_baseline_system
        goto scan_host_with_updated_signature
        goto scan_file_share_with_updated_signature
        goto remove_vulnerabilities_and_update_routers
        goto coordicate_AV_updates_to_be_pushed_upon_release_from_AV_vendor
    endif

def post_incident_handling():
    if incident_review is true:
        goto is_electronic_personal_health_information_compromised
        goto is_sensitive_government_information_compromised
    endif

    if lessons_uncoverd is true:
        goto discovery_meeting
        goto policy_updates_defined
        goto process_updates_defined
        goto configuration_updates_defined
    endif

    if lessons_applied is true:
        goto policies_implemented
        goto process_changes_implemented
        goto configurations_applied
    endif

    goto respond_workflow_updated